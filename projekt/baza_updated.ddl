-- Generated by Oracle SQL Developer Data Modeler 19.4.0.350.1424
--   at:        2020-11-21 20:31:26 CET
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



CREATE TABLE autor (
    id_autora         INTEGER NOT NULL,
    imie              VARCHAR2(20) NOT NULL,
    nazwisko          VARCHAR2(30) NOT NULL,
    kraj_pochodzenia  VARCHAR2(30)
);

CREATE INDEX autor__idx_nazw ON
    autor (
        nazwisko
    ASC );

ALTER TABLE autor ADD CONSTRAINT autor_pk PRIMARY KEY ( id_autora );

CREATE TABLE autor_produktu (
    produkt_nazwa    VARCHAR2(30) NOT NULL,
    autor_id_autora  INTEGER NOT NULL
);

CREATE INDEX autor_produktu__idx_autor ON
    autor_produktu (
        autor_id_autora
    ASC );

ALTER TABLE autor_produktu ADD CONSTRAINT autor_produktu_pk PRIMARY KEY ( produkt_nazwa,
                                                                          autor_id_autora );

CREATE TABLE element_koszyka (
    "L.p."                      INTEGER NOT NULL,
    liczba                      INTEGER NOT NULL,
    wartosc_artykulu            FLOAT(2) NOT NULL,
    koszyk_zakupowy_nr_koszyka  INTEGER NOT NULL,
    produkt_nazwa               VARCHAR2(30) NOT NULL
);

ALTER TABLE element_koszyka ADD CONSTRAINT element_koszyka_pk PRIMARY KEY ( "L.p.",
                                                                            koszyk_zakupowy_nr_koszyka );

CREATE TABLE gra_planszowa (
    nazwa         VARCHAR2(30) NOT NULL,
    g_min_gracze  INTEGER NOT NULL,
    g_max_gracze  INTEGER NOT NULL,
    g_min_wiek    INTEGER,
    g_czas_gry    INTEGER
);

ALTER TABLE gra_planszowa ADD CONSTRAINT gra_planszowa_ck_1 CHECK ( g_min_gracze <= g_max_gracze );

ALTER TABLE gra_planszowa ADD CONSTRAINT gra_planszowa_pk PRIMARY KEY ( nazwa );

CREATE TABLE klient (
    login             VARCHAR2(30) NOT NULL,
    "k_Adres_e-mail"  VARCHAR2(30) NOT NULL,
    k_adres           VARCHAR2(50) NOT NULL
);

ALTER TABLE klient ADD CONSTRAINT klient_pk PRIMARY KEY ( login,
                                                          "k_Adres_e-mail" );

CREATE TABLE koszyk_zakupowy (
    klient_login                  VARCHAR2(30) NOT NULL,
    nr_koszyka                    INTEGER NOT NULL,
    wartosc_zakupow               FLOAT(2) NOT NULL,
    sposob_platnosci              VARCHAR2(20) NOT NULL,
    koszt_wysylki                 FLOAT(2) NOT NULL,
    calkowita_wartosc_zamowienia  FLOAT(2) NOT NULL,
    "Klient_k_Adres_e-mail"       VARCHAR2(30) NOT NULL
);

CREATE INDEX koszyk_zakupowy__idx_klient ON
    koszyk_zakupowy (
        klient_login
    ASC );

ALTER TABLE koszyk_zakupowy ADD CONSTRAINT koszyk_zakupowy_pk PRIMARY KEY ( nr_koszyka );

CREATE TABLE ksi¹¿ka (
    nazwa           VARCHAR2(30) NOT NULL,
    k_typ_okladki   VARCHAR2(10),
    k_liczba_stron  INTEGER,
    k_format        VARCHAR2(4),
    seria_tytul     VARCHAR2(50)
);

ALTER TABLE ksi¹¿ka ADD CONSTRAINT ksi¹¿ka_pk PRIMARY KEY ( nazwa );

CREATE TABLE pracownik (
    login                VARCHAR2(30) NOT NULL,
    p_data_zatrudnienia  DATE NOT NULL,
    p_pensja_brutto      FLOAT(2) NOT NULL,
    p_stanowisko         VARCHAR2(20) DEFAULT ON NULL 'magazynier' NOT NULL,
    p_typ_umowy          VARCHAR2(30) DEFAULT ON NULL 'praca' NOT NULL
);

ALTER TABLE pracownik
    ADD CHECK ( p_stanowisko IN (
        'kierownik',
        'magazynier'
    ) );

ALTER TABLE pracownik
    ADD CHECK ( p_typ_umowy IN (
        'praca',
        'zlecenie'
    ) );

ALTER TABLE pracownik ADD CONSTRAINT pracownik_pk PRIMARY KEY ( login );

CREATE TABLE produkt (
    nazwa              VARCHAR2(30) NOT NULL,
    cena               FLOAT(2) NOT NULL,
    rok_wydania        DATE,
    stan_magazyn       INTEGER NOT NULL,
    wydawnictwo_nazwa  VARCHAR2(30) NOT NULL,
    co                 VARCHAR2(1) NOT NULL
);

ALTER TABLE produkt
    ADD CONSTRAINT ch_inh_produkt CHECK ( co IN (
        'g',
        'k'
    ) );

CREATE INDEX produkt__idx ON
    produkt (
        nazwa
    ASC );

CREATE INDEX produkt__idx_cena ON
    produkt (
        cena
    ASC );

CREATE INDEX produkt__idx_wydawnictwo ON
    produkt (
        wydawnictwo_nazwa
    ASC );

ALTER TABLE produkt ADD CONSTRAINT produkt_pk PRIMARY KEY ( nazwa );

CREATE TABLE seria (
    tytul         VARCHAR2(50) NOT NULL,
    liczba_tomow  INTEGER
);

ALTER TABLE seria ADD CONSTRAINT seria_pk PRIMARY KEY ( tytul );

CREATE TABLE u¿ytkownik (
    login          VARCHAR2(30) NOT NULL,
    has³o          VARCHAR2(20) NOT NULL,
    imiê           VARCHAR2(20) NOT NULL,
    nazwisko       VARCHAR2(30) NOT NULL,
    nr_kontaktowy  VARCHAR2(9),
    kto            VARCHAR2(1) NOT NULL
);

ALTER TABLE u¿ytkownik
    ADD CONSTRAINT ch_inh_u¿ytkownik CHECK ( kto IN (
        'k',
        'p'
    ) );

CREATE INDEX u¿ytkownik__idx ON
    u¿ytkownik (
        login
    ASC );

ALTER TABLE u¿ytkownik ADD CONSTRAINT u¿ytkownik_pk PRIMARY KEY ( login );

CREATE TABLE wydawnictwo (
    nazwa             VARCHAR2(30) NOT NULL,
    kraj_pochodzenia  VARCHAR2(30)
);

ALTER TABLE wydawnictwo ADD CONSTRAINT wydawnictwo_pk PRIMARY KEY ( nazwa );

ALTER TABLE autor_produktu
    ADD CONSTRAINT autor_produktu_autor_fk FOREIGN KEY ( autor_id_autora )
        REFERENCES autor ( id_autora );

ALTER TABLE autor_produktu
    ADD CONSTRAINT autor_produktu_produkt_fk FOREIGN KEY ( produkt_nazwa )
        REFERENCES produkt ( nazwa )
            ON DELETE CASCADE;

ALTER TABLE element_koszyka
    ADD CONSTRAINT element_koszyk_zakupowy_fk FOREIGN KEY ( koszyk_zakupowy_nr_koszyka )
        REFERENCES koszyk_zakupowy ( nr_koszyka )
            ON DELETE CASCADE;

ALTER TABLE element_koszyka
    ADD CONSTRAINT element_koszyka_produkt_fk FOREIGN KEY ( produkt_nazwa )
        REFERENCES produkt ( nazwa );

ALTER TABLE gra_planszowa
    ADD CONSTRAINT gra_planszowa_produkt_fk FOREIGN KEY ( nazwa )
        REFERENCES produkt ( nazwa )
            ON DELETE CASCADE;

ALTER TABLE klient
    ADD CONSTRAINT klient_u¿ytkownik_fk FOREIGN KEY ( login )
        REFERENCES u¿ytkownik ( login )
            ON DELETE CASCADE;

ALTER TABLE koszyk_zakupowy
    ADD CONSTRAINT koszyk_zakupowy_klient_fk FOREIGN KEY ( klient_login,
                                                           "Klient_k_Adres_e-mail" )
        REFERENCES klient ( login,
                            "k_Adres_e-mail" );

ALTER TABLE ksi¹¿ka
    ADD CONSTRAINT ksi¹¿ka_produkt_fk FOREIGN KEY ( nazwa )
        REFERENCES produkt ( nazwa )
            ON DELETE CASCADE;

ALTER TABLE ksi¹¿ka
    ADD CONSTRAINT ksi¹¿ka_seria_fk FOREIGN KEY ( seria_tytul )
        REFERENCES seria ( tytul )
            ON DELETE SET NULL;

ALTER TABLE pracownik
    ADD CONSTRAINT pracownik_u¿ytkownik_fk FOREIGN KEY ( login )
        REFERENCES u¿ytkownik ( login )
            ON DELETE CASCADE;

ALTER TABLE produkt
    ADD CONSTRAINT produkt_wydawnictwo_fk FOREIGN KEY ( wydawnictwo_nazwa )
        REFERENCES wydawnictwo ( nazwa );

CREATE OR REPLACE TRIGGER arc_fkarc_2_pracownik BEFORE
    INSERT OR UPDATE OF login ON pracownik
    FOR EACH ROW
DECLARE
    d VARCHAR2(1);
BEGIN
    SELECT
        a.kto
    INTO d
    FROM
        u¿ytkownik a
    WHERE
        a.login = :new.login;

    IF ( d IS NULL OR d <> 'p' ) THEN
        raise_application_error(-20223, 'FK Pracownik_U¿ytkownik_FK in Table Pracownik violates Arc constraint on Table U¿ytkownik - discriminator column kto doesn''t have value ''p''');
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_2_klient BEFORE
    INSERT OR UPDATE OF login ON klient
    FOR EACH ROW
DECLARE
    d VARCHAR2(1);
BEGIN
    SELECT
        a.kto
    INTO d
    FROM
        u¿ytkownik a
    WHERE
        a.login = :new.login;

    IF ( d IS NULL OR d <> 'k' ) THEN
        raise_application_error(-20223, 'FK Klient_U¿ytkownik_FK in Table Klient violates Arc constraint on Table U¿ytkownik - discriminator column kto doesn''t have value ''k''');
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_gra_planszowa BEFORE
    INSERT OR UPDATE OF nazwa ON gra_planszowa
    FOR EACH ROW
DECLARE
    d VARCHAR2(1);
BEGIN
    SELECT
        a.co
    INTO d
    FROM
        produkt a
    WHERE
        a.nazwa = :new.nazwa;

    IF ( d IS NULL OR d <> 'g' ) THEN
        raise_application_error(-20223, 'FK Gra_planszowa_Produkt_FK in Table Gra_planszowa violates Arc constraint on Table Produkt - discriminator column co doesn''t have value ''g''');
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_ksi¹¿ka BEFORE
    INSERT OR UPDATE OF nazwa ON ksi¹¿ka
    FOR EACH ROW
DECLARE
    d VARCHAR2(1);
BEGIN
    SELECT
        a.co
    INTO d
    FROM
        produkt a
    WHERE
        a.nazwa = :new.nazwa;

    IF ( d IS NULL OR d <> 'k' ) THEN
        raise_application_error(-20223, 'FK Ksi¹¿ka_Produkt_FK in Table Ksi¹¿ka violates Arc constraint on Table Produkt - discriminator column co doesn''t have value ''k''');
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE SEQUENCE autor_id_autora_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER autor_id_autora_trg BEFORE
    INSERT ON autor
    FOR EACH ROW
    WHEN ( new.id_autora IS NULL )
BEGIN
    :new.id_autora := autor_id_autora_seq.nextval;
END;
/

CREATE SEQUENCE koszyk_zakupowy_nr_koszyka_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER koszyk_zakupowy_nr_koszyka_trg BEFORE
    INSERT ON koszyk_zakupowy
    FOR EACH ROW
    WHEN ( new.nr_koszyka IS NULL )
BEGIN
    :new.nr_koszyka := koszyk_zakupowy_nr_koszyka_seq.nextval;
END;

create or replace PROCEDURE nowyKlient
    (vLogin IN VARCHAR2,
    vHaslo IN VARCHAR2,
    vImie IN VARCHAR2,
    vNazwisko IN VARCHAR2,
    vNr IN VARCHAR2,
    vE_mail IN VARCHAR2,
    vAdres IN VARCHAR2) IS
BEGIN
    INSERT INTO Uzytkownik VALUES(vLogin, vHaslo, vImie, vNazwisko, vNr, 'k');
    INSERT INTO Klient VALUES(vLogin, vE_mail, vAdres);
END nowyKlient;

create or replace PROCEDURE nowyPracownik
    (vLogin IN VARCHAR2,
    vHaslo IN VARCHAR2,
    vImie IN VARCHAR2,
    vNazwisko IN VARCHAR2,
    vNr IN VARCHAR2,
    vData_zatrudnienia IN DATE,
    vPensja IN FLOAT,
    vStanowisko IN VARCHAR2,
    vTyp_umowy IN VARCHAR2) IS
BEGIN
    INSERT INTO Uzytkownik VALUES(vLogin, vHaslo, vImie, vNazwisko, vNr, 'p');
    INSERT INTO Pracownik VALUES(vLogin, vData_zatrudnienia, vPensja, vStanowisko, vTyp_umowy);
END nowyPracownik;

create or replace PROCEDURE nowaKsiazka
    (vNazwa IN VARCHAR2,
    vCena IN FLOAT,
    vRok_wydania IN DATE,
    vStan IN NUMBER,
    vWydawnictwo IN VARCHAR2,
    vTyp_okladki IN VARCHAR2,
    vLiczba_stron IN NUMBER,
    vFormat IN VARCHAR2,
    vSeria IN VARCHAR2) IS
BEGIN
    INSERT INTO Produkt VALUES(vNazwa, vCena, vRok_wydania, vStan, vWydawnictwo, 'k');
    INSERT INTO Ksiazka VALUES(vNazwa, vTyp_okladki, vLiczba_stron, vFormat, vSeria);
END nowaKsiazka;

create or replace PROCEDURE nowaGra
    (vNazwa IN VARCHAR2,
    vCena IN FLOAT,
    vRok_wydania IN DATE,
    vStan IN NUMBER,
    vWydawnictwo IN VARCHAR2,
    vMin_gracze IN NUMBER,
    vMax_gracze IN NUMBER,
    vMin_wiek IN NUMBER,
    vCzas_gry IN NUMBER) IS
BEGIN
    INSERT INTO Produkt VALUES(vNazwa, vCena, vRok_wydania, vStan, vWydawnictwo, 'g');
    INSERT INTO Ksiazka VALUES(vNazwa, vMin_gracze, vMax_gracze, vMin_wiek, vCzas_gry);
END nowaGra;

create or replace FUNCTION checkPwd 
    (login_to_check IN VARCHAR2, 
     pass_to_check IN VARCHAR2)
    RETURN NUMBER IS 
    res NUMBER;
    user_log VARCHAR2(30);
    user_pass VARCHAR2(30);
BEGIN 
    SELECT login, Haslo INTO user_log, user_pass FROM Uzytkownik WHERE login = login_to_check;
    IF user_pass = pass_to_check THEN
        res := 1;
    ELSE res := 0;
    END IF;
    RETURN res;
END checkPwd;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            12
-- CREATE INDEX                             7
-- ALTER TABLE                             28
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         4
-- CREATE FUNCTION                          1
-- CREATE TRIGGER                           6
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          2
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
